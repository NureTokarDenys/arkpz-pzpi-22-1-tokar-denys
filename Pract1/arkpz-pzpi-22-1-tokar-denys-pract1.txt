Основні рекомендації
 написання коду для
мови програмування
        C++


              Виконав ст. гр. ПЗПІ-22-1 Токар Денис
Вступ

  C++ — це одна з найпотужніших і універсальних мов
програмування, яка використовується для розробки
програмного забезпечення, ігор, і високопродуктивних
додатків. Її ключовою особливістю є поєднання об'єктно-
орієнтованого та процедурного підходів, що надає
розробникам гнучкість у виборі стилю написання коду.

При написанні коду на C++ важливо дотримуватися
загальноприйнятих правил, стандартів і стилів
програмування, таких як наприклад C++ Core Guidelines, що
сприятиме полегшенню співпраці в команді, підвищенню
читабельності коду та зниженню кількості помилок.




                                                            1
Динамічне виділення пам'яті.




                               2
Витік пам'яті.




                 3
RAII (Resource Acquisition Is
Initialization)
RAII - ідіома C++, яка гарантує правильне звільнення ресурсів.
Ресурси прив'язуються до часу життя об'єктів




                                                                 4
Розумні покажчики.

Автоматично управляють пам'яттю та реалізують ідіому RAII.

Основні типи розумних покажчиків:
● std::unique_ptr: для ексклюзивного володіння ресурсом.
● std::shared_ptr: для розділеного володіння ресурсом.
● std::weak_ptr: для неволодіючого посилання на ресурс.




                                                             5
Переваги та недоліки ручного
управління пам'яттю.
Переваги:
● Повний контроль над життєвим циклом об'єктів;
● Передбачувана продуктивність;
● Відсутність пауз на збирання сміття;
● Можливість оптимізації під конкретні сценарії.

Недоліки:
● Більша складність коду;
● Ризик витоків пам'яті та помилок сегментації;
● Необхідність ретельного відстеження виділення/звільнення
   пам'яті;
● Збільшення часу розробки та налагодження.



                                                             6
Необхідно писати читабельний код
Основні принципи написання читабельного коду:
● Використовуйте зрозумілі назви для змінних, функцій і класів.
● Уникайте "магічних чисел" - замініть їх іменованими
  константами.
● Розбивайте довгі функції на менші, кожна з яких виконує одне
  конкретне завдання.




                                                                  7
Необхідно писати читабельний код

Використовуйте однакові відступи.
Дотримуйтесь єдиного стилю в усьому проекті.
Правильно розставляйте пробіли.




                                               8
Використовуйте стандартні
бібліотеки C++.




                            9
Використовуйте std::string замість
рядків у стилі C.




                                     10
Правильно обробляйте винятки.




                                11
Використовуйте посилання замість
показчиків.




                                   12
Висновки

 ●   Управління пам'яттю є критично важливим аспектом
     програмування на C++. Розуміння динамічного виділення
     пам'яті, запобігання витокам пам'яті та використання ідіоми
     RAII є фундаментальними для створення надійного коду.

 ●   Читабельність коду є ключовим фактором для
     довгострокового успіху проекту. Використання зрозумілих
     імен змінних, послідовного форматування та належних
     коментарів полегшує розуміння та підтримку коду.

 ●   Використання сучасних можливостей C++ значно підвищує
     безпеку, ефективність та якість коду, автоматизуючи багато
     аспектів управління ресурсами, підвищуючи безпеку та
     зручність роботи.

                                                                   13
Використані джерела:

 ●   Coding Best Practices for C++ - Richard Bellairs -
     https://www.perforce.com/blog/qac/3-coding-best-practices-
     cpp#three-01
 ●   C++ Core Guidelines – isocpp -
     https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines
     #main
 ●   C++ Coding Standards - Herb Sutter and Andrei Alexandrescu -
     https://micro-os-plus.github.io/develop/sutter-101/
 ●   Dynamic memory allocation C++ - Akash Gupta, Geeks for
     Geeks - https://eng.libretexts.org/Courses/Delta_College/C_-
     _Data_Structures/03%3A_Arrays/3.01%3A_Dynamic_memory_allo
     cation
